---
import Input from "@/shared/ui/input.astro";
import Button from "@/shared/ui/button.astro";
---

<div id="chatAndVideoSection" class="hidden space-y-4">
  <!-- Video Player -->
  <div id="videoContainer" class="space-y-2">
    <!-- HTML5 Video Player -->
    <video
      id="html5-player"
      class="hidden w-full rounded-lg"
      controls
      preload="auto"></video>
    <!-- Youtube API Video Player -->
    <div id="youtube-player" class="hidden h-64 w-full rounded-lg"></div>
  </div>

  <div class="mx-auto flex h-[256px] w-[520px] space-x-2">
    <div class="size-[256px]">
      <video id="remoteVideo" class="size-full rounded-lg"></video>
    </div>
    <div class="size-[256px]">
      <video id="localVideo" class="size-full rounded-lg"></video>
    </div>
  </div>

  <div class="flex gap-2">
    <Input id="videoLink" type="text" placeholder="Change Video Source Link" />
    <Button id="changeVideoBtn">Change</Button>
  </div>

  <div class="space-y-2">
    <Button id="start-live-stream">Start live-stream</Button>
    <Button id="stop-live-stream">Stop live-stream</Button>
  </div>

  <!-- Chat Section -->
  <form id="chatSection" class="space-y-4">
    <div class="flex gap-2">
      <Input id="messageInput" type="text" placeholder="Type your message..." />
      <Button type="submit" id="sendBtn">Send</Button>
    </div>
    <div class="h-64 overflow-y-auto rounded-lg border p-4">
      <div id="message-list" class="space-y-2"></div>
    </div>
  </form>
</div>

<script>
  import { setupVideoPlayer } from "@/features/video/lib/setupVideoPlayer";
  import { ChatManager } from "../../chat/lib";
  import { LiveStreamManager } from "../../live-stream/lib/LiveStreamManager";
  import { initializePeerConnection } from "@/features/connection/lib/initializePeerConnection";
  import { VideoSyncManager } from "@/features/video/lib/VideoSyncManager";
  import { isYoutubeUrl } from "@/shared/lib/utils";

  initializePeerConnection();
  document.addEventListener("DOMContentLoaded", () => {
    const connectionSection = document.getElementById("connection-section")!;

    const chatManager = new ChatManager(window.chatChannel);
    chatManager.setupDataChannel();
    chatManager.setupListeners();

    const chatAndVideoSection = document.getElementById("chatAndVideoSection")!;

    window.chatChannel.addEventListener("open", () => {
      chatAndVideoSection.classList.remove("hidden");
      connectionSection.classList.add("hidden");
    });

    // LIVE-STREAM START
    const remoteVideo = document.getElementById(
      "remoteVideo"
    ) as HTMLVideoElement;
    const localVideo = document.getElementById(
      "localVideo"
    ) as HTMLVideoElement;

    const liveStreamManager = new LiveStreamManager(
      window.liveStreamChannel,
      window.pc,
      remoteVideo,
      localVideo
    );

    liveStreamManager.setupDataChannel();

    const startLiveStream = document.getElementById("start-live-stream")!;
    const stopLiveStream = document.getElementById("stop-live-stream")!;

    startLiveStream.addEventListener("click", () =>
      liveStreamManager.startStream()
    );
    stopLiveStream.addEventListener("click", () =>
      liveStreamManager.stopStream()
    );
  });
  // LIVE STREAM END

  // VIDEO SOURCE START

  const videoSourceInput = document.getElementById(
    "videoLink"
  ) as HTMLInputElement;

  const changeVideoSourceBtn = document.getElementById(
    "changeVideoBtn"
  ) as HTMLButtonElement;

  const videoSyncManager = new VideoSyncManager(window.videoChannel);

  // Set new source
  changeVideoSourceBtn.addEventListener("click", e => {
    if (videoSourceInput.value.trim() === "") alert("No videolink provided :(");

    const playerType = isYoutubeUrl(videoSourceInput.value)
      ? "yt-player"
      : "html5-player";

    if (videoSyncManager.getVideoPlayerName() !== playerType) {
      videoSyncManager.setVideoPlayer(setupVideoPlayer(videoSourceInput.value));
    }

    videoSyncManager.setLocalVideoSource(videoSourceInput.value);
    videoSyncManager.setRemoteVideoSource(videoSourceInput.value);
    videoSourceInput.value = "";
  });

  window.videoChannel.addEventListener("message", async event => {
    const message = JSON.parse(event.data);

    if (message.type === "video-source" && message.src) {
      const playerType = isYoutubeUrl(message.src)
        ? "yt-player"
        : "html5-player";

      if (videoSyncManager.getVideoPlayerName() !== playerType) {
        videoSyncManager.setVideoPlayer(setupVideoPlayer(message.src));
      }
      videoSyncManager.setLocalVideoSource(message.src);
    }
  });

  // VIDEO SOURCE END

  // There's an issue with switching to another YouTube video.
  // The reason for that is when user switches video, new instance of video player created.
  // Meaning, it's listeners, handlers, iframe elements, etc are lost and can't be cleared

  // As a solution, we can just upgrade src of the player & do cleanup
</script>
